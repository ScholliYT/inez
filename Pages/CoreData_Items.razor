@page "/coredata"
@using INEZ.Data
@using INEZ.Classes
@using INEZ.Data.Entities
@using INEZ.Data.Services
@using Microsoft.AspNetCore.Components


@inject CoreDataItemsService ItemsService
@inject IUriHelper UriHelper
<h3>Stammdaten </h3>

@if (_items == null)
{
    <p><em>Lade...</em></p>
}
else
{
    <div class="container">
        <div class="row" style="margin-bottom: 10px">
            <div class="col-md-3">
                <button class="btn btn-primary" type="button" @onclick=AddNew>Hinzufügen</button>
            </div>
            <div class="col">
                <form class="form-grid">
                    <div class="input-group mb-auto">
                        <input type="search" class="form-control" @bind-value="this.SearchTerm" @bind-value:event="oninput" />
                        <div class="input-group-append">
                            <button class="btn btn-secondary" type="button" @onclick="SearchClick">Suchen/Hinzufügen</button>
                            <button class="btn btn-danger" type="button" @onclick="ClearClick">x</button>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" id="usefuzzysearch" @bind-value="UseFuzzySearch" />
                            <label class="form-check-label" for="usefuzzysearch">Fuzzy Suche</label>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <table class="table">
                    <thead>
                        <tr>
                            <th style="width: 20%">@QuantitiyColumnName</th>
                            <th style="width: 70%">@NameColumnName</th>
                            <th style="width: 10%"></th> @*for buttons*@
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in _items)
                        {
                            <tr>
                                <td>@item.Quantity</td>
                                <td>@item.Name</td>
                                <td>
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-light" @onclick=@(() => EditItem(item.Id))>...</button>
                                        <button type="button" class="btn btn-danger" @onclick=@(() => ConfirmDelete(item))>x</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    IEnumerable<CoreDataItem> _items;

    [Inject]
    protected IJSRuntime JsRuntime { get; set; }

    [Inject]
    protected IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    public string QuantitiyColumnName
    {
        get
        {
            return DisplayHelper.GetDisplayName<Item>(i => i.Quantity) ?? nameof(Item.Quantity);
        }
    }

    public string NameColumnName
    {
        get
        {
            return DisplayHelper.GetDisplayName<Item>(i => i.Name) ?? nameof(Item.Name);
        }
    }

    private string _searchTerm = "";
    [Parameter]
    public string SearchTerm
    {
        get { return _searchTerm; }
        set
        {
            _searchTerm = value;
            SearchClick().ConfigureAwait(false);
        }
    }

    private bool _UseFuzzySearch;

    public bool UseFuzzySearch
    {
        get { return _UseFuzzySearch; }
        set
        {
            _UseFuzzySearch = value;
            SearchClick().ConfigureAwait(false);
        }
    }


    private async Task LoadItems()
    {
        _items = await ItemsService.GetItemsAsync();
        StateHasChanged();
    }

    protected void AddNew()
    {
        UriHelper.NavigateTo("/edititem");
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            await LoadItems();
            return;
        }

        await Search(SearchTerm);
    }

    private async Task Search(string term)
    {
        if (UseFuzzySearch)
        {
            try
            {

                _items = await ItemsService.FuzzySearchItemsAsync(term);
            }
            catch (Exception ex)
            {

                throw;
            }
        }
        else
        {
            _items = await ItemsService.SearchItemsAsync(term);
        }
        StateHasChanged();
    }

    protected async Task ClearClick()
    {
        SearchTerm = "";
        await SearchClick();
    }

    protected void EditItem(Guid id)
    {
        UriHelper.NavigateTo("/edititem/" + id.ToString());
    }

    protected void ConfirmDelete(CoreDataItem item)
    {
        var parameters = new ModalParameters();

        parameters.Add("Item", item);

        Modal.OnClose += DelteConfirmModalClosed;
        Modal.Show("Löschen bestätigen", typeof(ConfirmDeleteDialog), parameters);
    }

    protected async void DelteConfirmModalClosed(ModalResult result)
    {
        Modal.OnClose -= DelteConfirmModalClosed;
        if (!result.Cancelled)
        {
            await ItemsService.DeleteItem((CoreDataItem)result.Data);
            await SearchClick();
        }
    }
}
