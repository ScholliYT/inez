@page "/einkaufsliste"
@using INEZ.Data
@using INEZ.Classes
@using INEZ.Data.Entities


@inject ItemsService ItemsService
@inject IUriHelper UriHelper
<h3>Einkaufsliste</h3>

@if (Items == null)
{
    <p><em>Lade...</em></p>
}
else
{
    <div class="container">
        <div class="row" style="margin-bottom: 10px">
            <div class="col-md-3">
                <button class="btn btn-primary" type="button" @onclick=AddNew>Hinzufügen</button>
            </div>
            <div class="col-md-9">
                <form class="float-right form-inline">
                    <div class="input-group mb-3">
                        <input type="search" class="form-control" @bind-value="this.SearchTerm" @bind-value:event="oninput" />
                        <div class="input-group-append">
                            <button class="btn btn-secondary" type="button" @onclick="SearchClick">Suchen</button>
                            <button class="btn btn-outline-danger" type="button" @onclick="ClearClick">Zurücksetzen</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <table class="table">
                    <thead>
                        <tr>
                            <th>@NameDisplayValue</th>
                            <th>@DescriptionDisplayValue</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Items)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                <td>
                                    <button type="button" class="btn btn-light" @onclick=@(() => EditItem(item.Id))>...</button>
                                    <button type="button" class="btn btn-danger" @onclick=@(() => ConfirmDelete(item.Id, item.Name))>x</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}


<div class="modal" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Confirm delete</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                <input type="hidden" id="bookToDeleteField" @bind-value=@DeleteId />
                Are you sure you want to delete book <span id="bookTitleField"></span>?
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick=DelteItem>Delete</button>
            </div>

        </div>
    </div>
</div>

@code {
        IEnumerable<Item> Items;

    protected Guid DeleteId { get; set; } = default;

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

        public string NameDisplayValue
        {
            get
            {
                return DisplayHelper.GetDisplayName<Item>(i => i.Name) ?? nameof(Item.Name);
            }
        }

        public string DescriptionDisplayValue
        {
            get
            {
                return DisplayHelper.GetDisplayName<Item>(i => i.Description) ?? nameof(Item.Description);
            }
        }


        private string _searchTerm = "";
        [Parameter]
        public string SearchTerm
        {
            get { return _searchTerm; }
            set
            {
                _searchTerm = value;
                SearchClick();
            }
        }



        private async Task LoadItems()
        {
            Items = await ItemsService.GetItemsAsync();
            StateHasChanged();
        }

    protected void AddNew()
    {
        UriHelper.NavigateTo("/edititem");
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            await LoadItems();
            return;
        }

        await Search(SearchTerm);
    }

    private async Task Search(string term)
    {
        Items = await ItemsService.SearchItemsAsync(term);
        StateHasChanged();
    }

    protected async Task ClearClick()
    {
        SearchTerm = "";
        await SearchClick();
    }

    protected void EditItem(Guid Id)
    {
        UriHelper.NavigateTo("/edititem/" + Id.ToString());
    }

    protected async void ConfirmDelete(Guid Id, string name)
    {
        DeleteId = Id;

        await JSRuntime.InvokeAsync<bool>("blazorDemoInterop.confirmDelete", name);
    }

    protected async Task DelteItem()
        {
            await JSRuntime.InvokeAsync<bool>("blazorDemoInterop.hideDeleteDialog");

            await ItemsService.DeleteItem(DeleteId);
            await LoadItems();
        }
}
